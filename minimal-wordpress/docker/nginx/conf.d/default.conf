# Upstream PHP-FPM - connect to WordPress container
upstream php-fpm {
    server wordpress:9000;
    keepalive 16;
}

# Cache zones for static content
fastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=wordpress_fastcgi:50m max_size=512m inactive=30m use_temp_path=off;

server {
    listen 80;
    server_name _;
    root /var/www/html;
    index index.php index.html index.htm;

    # Security
    server_tokens off;

    # Logging
    access_log /var/log/nginx/wordpress.access.log main;
    error_log /var/log/nginx/wordpress.error.log;

    # Rate limiting - ONLY for dynamic content, not static files
    # limit_req zone=global burst=10 nodelay;  # Moved to specific locations

    # Block common exploits
    location ~* /(wp-config\.php|readme\.html|license\.txt|wp-config-sample\.php) {
        deny all;
        return 404;
    }

    # Block access to sensitive directories
    location ~ ^/(wp-content)/(.*?)\.(php|phps)$ {
        deny all;
        return 404;
    }

    # WordPress security - prevent PHP execution in uploads
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
        return 404;
    }

    # Hide sensitive files
    location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|old|tmp)$ {
        deny all;
        return 404;
    }

    # Block access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }

    # Static files from wp-content (themes, plugins, etc.) - HIGH PRIORITY
    location ^~ /wp-content/ {
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|avif|woff|woff2|ttf|eot|otf|bmp|tiff|pdf|mp3|mp4|avi|mov|wmv|flv|swf|zip|rar)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
            log_not_found off;
            
            # Enable gzip for appropriate files
            gzip_static on;
            
            # Actually serve the file
            try_files $uri =404;
        }
        
        # Block PHP execution in wp-content (except in specific allowed locations)
        location ~* \.php$ {
            # Allow PHP in themes/plugins but not in uploads
            if ($uri ~ "^/wp-content/(?:uploads|cache)/") {
                return 404;
            }
            # Pass allowed PHP files to FastCGI
            include fastcgi_params;
            fastcgi_pass php-fpm;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_read_timeout 120;
        }
        
        # Try to serve other files directly
        try_files $uri =404;
    }

    # WordPress login protection with enhanced rate limiting
    location = /wp-login.php {
        limit_req zone=login burst=2 nodelay;
        limit_req zone=global burst=5 nodelay;  # Add global rate limiting here
        include fastcgi_params;
        fastcgi_pass php-fpm;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        fastcgi_read_timeout 120;
    }

    # WordPress uploads directory - serve media files directly
    location ^~ /wp-content/uploads/ {
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif|bmp|tiff|pdf|doc|docx|xls|xlsx|ppt|pptx|zip|rar|mp3|mp4|avi|mov|wmv|flv|swf)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
            log_not_found off;
            
            # Enable gzip for appropriate files
            gzip_static on;
        }
        
        # Handle WordPress cache generated files (CSS/JS in uploads)
        location ~* \.(css|js)$ {
            expires 7d;  # Shorter cache for generated files
            add_header Cache-Control "public";
            add_header Vary Accept-Encoding;
            access_log off;
            log_not_found off;
            gzip_static on;
            try_files $uri =404;
        }
        
        # Block PHP execution in uploads (security)
        location ~* \.php$ {
            deny all;
            return 404;
        }
        
        # Try to serve the file directly
        try_files $uri =404;
    }

    # Static files now handled by specific wp-content location blocks above

    # WordPress admin - FIXED to handle static files properly
    location ^~ /wp-admin/ {
        # Static files in wp-admin (CSS, JS, images)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|avif|woff|woff2|ttf|eot|otf)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
            log_not_found off;
            gzip_static on;
            try_files $uri =404;
        }
        
        # PHP files in wp-admin
        location ~ \.php$ {
            limit_req zone=global burst=5 nodelay;  # Rate limiting for admin PHP
            include fastcgi_params;
            fastcgi_pass php-fpm;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_read_timeout 120;
        }

        # Other files in wp-admin - serve directly
        try_files $uri $uri/ /wp-admin/index.php?$args;
    }

    # Handle WordPress pretty permalinks
    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # PHP processing - proxy to WordPress container
    location ~ \.php$ {
        limit_req zone=global burst=10 nodelay;  # Rate limiting for general PHP
        include fastcgi_params;
        fastcgi_intercept_errors on;
        fastcgi_pass php-fpm;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        
        # Performance settings
        fastcgi_read_timeout 120;
        fastcgi_buffer_size 64k;
        fastcgi_buffers 4 128k;
        fastcgi_busy_buffers_size 128k;
        
        # Enable FastCGI caching for better performance
        fastcgi_cache wordpress_fastcgi;
        fastcgi_cache_valid 200 301 302 10m;
        fastcgi_cache_valid 404 1m;
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
        add_header X-FastCGI-Cache $upstream_cache_status;
    }

    # Disable WordPress XML-RPC (recommended for security)
    location = /xmlrpc.php {
        deny all;
        return 404;
    }

    # Optimize robots.txt and favicon
    location = /robots.txt {
        access_log off;
        log_not_found off;
        expires 1d;
    }

    location = /favicon.ico {
        expires 30d;
        access_log off;
        log_not_found off;
    }

    # Skip cache variable for dynamic content
    set $skip_cache 0;

    # POST requests and URLs with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }
    if ($query_string != "") {
        set $skip_cache 1;
    }

    # Don't cache URIs containing the following segments
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }

    # Don't use the cache for logged in users or recent commenters (WordPress docs requirement)
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }
    
    # Additional cache-busting cookies (per WordPress performance docs)
    if ($http_cookie ~* "woocommerce_cart_hash|woocommerce_items_in_cart|wp_woocommerce_session") {
        set $skip_cache 1;
    }
    
    # Set proper cache headers for static content
    location ~* \.(css|js)$ {
        add_header Cache-Control "public, max-age=2592000, immutable";
        add_header Vary "Accept-Encoding";
        expires 30d;
    }
    
    # Set proper cache headers for media files
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif|bmp|tiff|pdf|mp3|mp4|avi|mov|wmv|flv|swf|zip|rar)$ {
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header Vary "Accept-Encoding";
        expires 1y;
    }

    # ===========================================
    # SECURITY HEADERS CONFIGURATION
    # ===========================================
    # Note: Security headers are primarily managed in:
    # 1. /etc/nginx/nginx.conf (global headers)
    # 2. /etc/nginx/security-headers.conf (detailed configuration)
    # 
    # The headers below are commented out to avoid duplication
    # Uncomment only if you need site-specific overrides

    # Essential security headers (managed globally)
    # add_header X-Frame-Options "SAMEORIGIN" always;
    # add_header X-Content-Type-Options "nosniff" always;
}